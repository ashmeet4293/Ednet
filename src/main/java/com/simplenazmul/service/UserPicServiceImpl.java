package com.simplenazmul.service;

import static org.mockito.Mockito.RETURNS_DEEP_STUBS;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.simplenazmul.dao.UserPicDao;
import com.simplenazmul.model.User;
import com.simplenazmul.model.UserPic;
import com.simplenazmul.model.UserPicAlbum;

@Service
@Transactional
public class UserPicServiceImpl implements UserPicService {

	@Autowired
	UserPicDao dao;

	@Override
	public void save(UserPic userPic) {
		dao.save(userPic);

	}

	@Override
	public List<UserPic> findByAlbumId(UserPicAlbum albumId) {
		return dao.findByAlbumId(albumId);
	}

	@Override
	public List<UserPic> findByUser(User User) {
		return dao.findByUser(User);
	}

	@Override
	public UserPic findById(int userPictureId) {
		return dao.findById(userPictureId);
	}

	@Override
	public void deleteById(int userPictureId) {
		dao.deleteById(userPictureId);

	}

	@Override
	public List<UserPic> findRecent20PicByLoginUserId(int loginUserId) {
		return dao.findRecent20PicByLoginUserId(loginUserId);
	}

	@Override
	public String timeAgoFunction(Timestamp time) {
		Timestamp ts = time;
		Date date = new Date();
		date.setTime(ts.getTime());

		try {

			Date past = date;
			Date now = new Date();
			long seconds = TimeUnit.MILLISECONDS.toSeconds(now.getTime() - past.getTime());
			long minutes = TimeUnit.MILLISECONDS.toMinutes(now.getTime() - past.getTime());
			long hours = TimeUnit.MILLISECONDS.toHours(now.getTime() - past.getTime());
			long days = TimeUnit.MILLISECONDS.toDays(now.getTime() - past.getTime());

			if (seconds <= 10) {
				System.out.println(seconds + " seconds ago");
				return "Few seconds ago";
			} else if (seconds > 10 & seconds < 60) {
				System.out.println(seconds + " seconds ago");
				return seconds + " seconds ago";
			} else if (minutes < 60) {
				System.out.println(minutes + " minutes ago");
				return minutes + " minutes ago";
			} else if (hours < 24) {
				System.out.println(hours + " hours ago");
				return hours + " hours ago";
			} else {
				System.out.println(days + " days ago");
				return days + " days ago";
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e);
			return null;
		}
	}

	@Override
	public String findAutoGeneratedPicName(int pictureId) {
		return dao.findAutoGeneratedPicName(pictureId);
	}

	@Override
	public UserPic findByAutoGeneratedPicName(String pictureNameAutoGenerated) {
		return dao.findByAutoGeneratedPicName(pictureNameAutoGenerated);
	}

	@Override
	public void updatePic(UserPic userPic) {
		dao.updatePic(userPic);
		
	}

	@Override
	public List<UserPic> findRecent20PicByFriendUserId(int paramUserId) {
		return dao.findRecent20PicByFriendUserId(paramUserId);
	}

	@Override
	public List<UserPic> findRecent20PicByPublicUserId(int paramUserId) {
		return dao.findRecent20PicByPublicUserId(paramUserId);
	}

}
