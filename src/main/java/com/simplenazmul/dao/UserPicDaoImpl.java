package com.simplenazmul.dao;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.LogicalExpression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.simplenazmul.model.User;
import com.simplenazmul.model.UserPic;
import com.simplenazmul.model.UserPicAlbum;
import com.simplenazmul.model.UserPost;

@Repository
public class UserPicDaoImpl extends AbstractDao<Integer, UserPic> implements UserPicDao {

	@Override
	public void save(UserPic userPicture) {
		persist(userPicture);

	}

	public void updatePic(UserPic userPic) {
		update(userPic);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<UserPic> findByAlbumId(UserPicAlbum albumId) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("albumId", albumId));

		List<UserPic> userPic = crit.list();
		return userPic;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<UserPic> findByUser(User user) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("user", user));

		List<UserPic> userPic = crit.list();
		return userPic;
	}

	@Override
	public UserPic findById(int userPictureId) {
		return getByKey(userPictureId);
	}

	@Override
	public void deleteById(int userPictureId) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("pictureId", userPictureId));
		UserPic user = (UserPic) crit.uniqueResult();
		delete(user);

	}

	@SuppressWarnings("unchecked")
	@Override
	public List<UserPic> findRecent20PicByLoginUserId(int loginUserId) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("userId", loginUserId));
		crit.addOrder(Order.desc("pictureId"));
		crit.setMaxResults(20);

		return crit.list();
	}

	@Override
	public String findAutoGeneratedPicName(int pictureId) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("pictureId", pictureId));

		UserPic userPic = (UserPic) crit.uniqueResult();
		String autoGeneratedName = userPic.getPictureNameAutoGenerated();

		return autoGeneratedName;
	}

	@Override
	public UserPic findByAutoGeneratedPicName(String pictureNameAutoGenerated) {
		Criteria crit = createEntityCriteria();
		crit.add(Restrictions.eq("pictureNameAutoGenerated", pictureNameAutoGenerated));

		UserPic userPic2 = (UserPic) crit.uniqueResult();
		System.out.println(userPic2);

		return userPic2;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<UserPic> findRecent20PicByFriendUserId(int paramUserId) {
		Criteria crit = createEntityCriteria();

		Criterion friendUserId = Restrictions.eq("userId", paramUserId);
		Criterion c2 = Restrictions.eq("privacy", "PUBLIC");
		Criterion c3 = Restrictions.eq("privacy", "FRIENDS");

		LogicalExpression orLogicPrivacy = Restrictions.or(c2, c3);
		LogicalExpression andLogic1 = Restrictions.and(orLogicPrivacy, friendUserId);
		crit.add(andLogic1);

		crit.addOrder(Order.desc("pictureId"));
		crit.setMaxResults(20);

		List<UserPic> upic = crit.list();

		return upic;

	}

	@SuppressWarnings("unchecked")
	@Override
	public List<UserPic> findRecent20PicByPublicUserId(int paramUserId) {
		Criteria crit = createEntityCriteria();

		Criterion friendUserId = Restrictions.eq("userId", paramUserId);
		Criterion c2 = Restrictions.eq("privacy", "PUBLIC");

		LogicalExpression andLogic1 = Restrictions.and(c2, friendUserId);
		crit.add(andLogic1);

		crit.addOrder(Order.desc("pictureId"));
		crit.setMaxResults(20);

		List<UserPic> upic = crit.list();

		return upic;
	}

}
